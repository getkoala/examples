import dayjs from 'dayjs';
import durationPlugin from 'dayjs/plugin/duration';
import type { Profile } from './indexing';
declare type Time = 'yesterday' | `${number} months ago` | `1 month ago` | `${number} days ago` | `1 day ago` | `${number} hours ago` | `1 hour ago` | `${number} minutes ago` | `1 minute ago` | `${number} seconds ago` | `1 second ago` | 'tomorrow' | `${number} months from now` | `1 month from now` | `${number} days from now` | `1 day from now` | `${number} hours from now` | `1 hour from now` | `${number} minutes from now` | `1 minute from now` | `${number} seconds from now` | `1 second from now` | string | number | Date | dayjs.Dayjs | null | undefined;
export declare type SessionStart = {
    pretty: (template?: string | undefined) => string;
    fromNow: (withoutSuffix?: boolean | undefined) => string;
    calendar: (referenceTime?: string | number | Date | dayjs.Dayjs | null | undefined, formats?: object | undefined) => string;
    today: () => boolean;
    isBefore: (input: Time) => boolean;
    isAfter: (input: Time) => boolean;
};
export declare function start(profile: Pick<Profile, 'sessionStart'>): SessionStart;
export declare type SessionDuration = {
    pretty: (withSuffix?: boolean | undefined) => string;
    raw: durationPlugin.Duration;
    seconds: () => number;
    minutes: () => number;
    hours: () => number;
    days: () => number;
    weeks: () => number;
    months: () => number;
};
export declare function duration(profile: Pick<Profile, 'sessionStart'>): SessionDuration;
export declare class Session {
    start: SessionStart;
    duration: SessionDuration;
    constructor(profile: Profile);
}
export {};

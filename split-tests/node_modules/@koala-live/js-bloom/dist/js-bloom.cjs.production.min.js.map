{"version":3,"file":"js-bloom.cjs.production.min.js","sources":["../src/bitarray.ts","../src/zlib.ts","../src/bloom-filter.ts","../src/count-min-sketch/index.ts"],"sourcesContent":["const ELEMENT_WIDTH = 32;\n\nexport class BA {\n  constructor(private size: number, public field?: number[] | null) {\n    this.size = size;\n    this.field = field || [];\n\n    const arrayLength = Math.floor((size - 1) / ELEMENT_WIDTH + 1);\n    if (!field) {\n      for (\n        let i = 0, end = arrayLength - 1, asc = 0 <= end;\n        asc ? i <= end : i >= end;\n        asc ? i++ : i--\n      ) {\n        this.field[i] = 0;\n      }\n    }\n  }\n\n  add(position: number) {\n    return this.set(position, 1);\n  }\n\n  remove(position: number) {\n    return this.set(position, 0);\n  }\n\n  set(position: number, value: number) {\n    if (position >= this.size) {\n      throw new Error('BitArray index out of bounds');\n    }\n    const aPos = arrayPosition(position);\n    const bChange = bitChange(position);\n    if (value === 1) {\n      this.field[aPos] = abs(this.field[aPos] | bChange);\n    } else if ((this.field[aPos] & bChange) !== 0) {\n      this.field[aPos] = abs(this.field[aPos] ^ bChange);\n    }\n    return true;\n  }\n\n  get(position: number) {\n    if (position >= this.size) {\n      throw new Error('BitArray index out of bounds');\n    }\n    const aPos = arrayPosition(position);\n    const bChange = bitChange(position);\n    if (abs(this.field[aPos] & bChange) > 0) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n}\n\nfunction arrayPosition(position: number) {\n  return Math.floor(position / ELEMENT_WIDTH);\n}\n\nfunction bitChange(position: number) {\n  return abs(1 << position % ELEMENT_WIDTH);\n}\n\nfunction abs(val: number) {\n  if (val < 0) {\n    val += 4294967295;\n  }\n  return val;\n}\n","function crcTable() {\n  let c;\n  let crcTable = [];\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = c & 1 ? 0xedb88320 ^ (c >>> 1) : c >>> 1;\n    }\n    crcTable[n] = c;\n  }\n  return crcTable;\n}\n\nconst CRC32_TABLE = crcTable();\n\nexport const crc32 = (string: string) => {\n  const bytes = bytesFor(string);\n  let crc = 0;\n  let n = 0;\n  crc = crc ^ -1;\n  let i = 0;\n  const iTop = bytes.length;\n\n  while (i < iTop) {\n    n = (crc ^ bytes[i]) & 0xff;\n    crc = (crc >>> 8) ^ CRC32_TABLE[n];\n    i++;\n  }\n  crc = crc ^ -1;\n  if (crc < 0) {\n    crc += 4294967296;\n  }\n  return crc;\n};\n\nconst bytesFor = (string: string) => {\n  const bytes = [];\n  let i = 0;\n\n  while (i < string.length) {\n    bytes.push(string.charCodeAt(i));\n    ++i;\n  }\n  return bytes;\n};\n","import { BA } from './bitarray';\nimport { crc32 } from './zlib';\n\nexport interface JsBloomOptions {\n  size: number;\n  hashes: number;\n  seed?: number;\n  bits?: null | number[];\n}\n\nexport class JsBloom {\n  private bits: BA;\n\n  constructor(private options: Partial<JsBloomOptions> = {}) {\n    this.options = {\n      size: 100,\n      hashes: 4,\n      seed: new Date().getTime() / 1000,\n      bits: null,\n      ...options,\n    };\n\n    this.bits = new BA(this.options['size'], this.options['bits']);\n  }\n\n  add(...keys: string[]) {\n    for (let key of keys) {\n      for (let index of Array.from(this.indexesFor(key))) {\n        this.bits.add(index);\n      }\n    }\n  }\n\n  test(...keys: string[]) {\n    for (let key of keys) {\n      for (let index of this.indexesFor(key)) {\n        if (this.bits.get(index) === 0) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  toHash(): JsBloomOptions {\n    return {\n      size: this.options['size'],\n      hashes: this.options['hashes'],\n      seed: this.options['seed'],\n      bits: this.bits.field,\n    };\n  }\n\n  toJson() {\n    return JSON.stringify(this.toHash());\n  }\n\n  indexesFor(key: string) {\n    const indexes: number[] = [];\n    for (\n      let index = 0, end = this.options['hashes'] - 1, asc = 0 <= end;\n      asc ? index <= end : index >= end;\n      asc ? index++ : index--\n    ) {\n      indexes.push(\n        crc32(`${key}:${index + this.options['seed']}`) % this.options['size']\n      );\n    }\n\n    return indexes;\n  }\n}\n","import { crc32 } from \"../zlib\";\n\nexport interface CountMinSketchOptions {\n  size: number;\n  hashes: number;\n  data?: number[][];\n  seeds?: number[];\n}\n\nconst MAX_FIXNUM = Number.MAX_SAFE_INTEGER - 1;\n\nfunction createData(k: number, m: number): Uint32Array[] {\n  const data = new Array(k);\n  for (let i = 0; i < k; i++) {\n    data[i] = new Uint32Array(m);\n  }\n  return data;\n}\n\nfunction convertData(data: number[][]): Uint32Array[] {\n  return data.map((k) => Uint32Array.from(k));\n}\n\nfunction toArray(data: Uint32Array[]): number[][] {\n  return data.map((k) => Array.from(k));\n}\n\nfunction seeds(k: number): number[] {\n  const seeds = new Array(k);\n  for (let i = 0; i < k; i++) {\n    seeds[i] = Math.random() * (MAX_FIXNUM + 1);\n  }\n  return seeds;\n}\n\nconst DEFAULTS: Partial<CountMinSketchOptions> = {\n  size: 100,\n  hashes: 4,\n};\nexport class CountMinSketch {\n  private options: CountMinSketchOptions;\n  private k: number;\n  private m: number;\n  private data: Uint32Array[];\n  private seeds: number[];\n\n  constructor(options: Partial<CountMinSketchOptions> = {}) {\n    this.options = Object.assign(\n      {},\n      DEFAULTS,\n      options\n    ) as CountMinSketchOptions;\n\n    this.k = this.options.hashes;\n    this.m = this.options.size;\n    this.data = this.options.data\n      ? convertData(this.options.data)\n      : createData(this.k, this.m);\n\n    this.seeds = this.options.seeds || seeds(this.k);\n  }\n\n  count(item: string): number {\n    return this.add(item, 0);\n  }\n\n  add(item: string, n: number = 1): number {\n    let minCount = Infinity;\n\n    this.seeds.forEach((seed, i) => {\n      const hash = crc32(`${item}:${seed + i}`);\n\n      const j = hash % this.m;\n      const cnt = (this.data[i][j] += n);\n\n      if (cnt < minCount) {\n        minCount = cnt;\n      }\n    });\n\n    return minCount;\n  }\n\n  setCount(item: string, n: number) {\n    this.add(item, n - this.count(item));\n  }\n\n  toHash(): object {\n    return Object.assign({}, this.options, {\n      data: toArray(this.data),\n      seeds: this.seeds,\n    });\n  }\n\n  toJSON(): string {\n    return JSON.stringify(this.toHash());\n  }\n}\n"],"names":["BA","size","field","arrayLength","Math","floor","i","end","asc","add","position","this","set","remove","value","Error","aPos","arrayPosition","bChange","bitChange","abs","get","val","crcTable","c","n","k","CRC32_TABLE","crc32","string","bytes","bytesFor","crc","iTop","length","push","charCodeAt","JsBloom","options","bits","hashes","seed","Date","getTime","keys","key","Array","from","indexesFor","index","test","toHash","toJson","JSON","stringify","indexes","MAX_FIXNUM","Number","MAX_SAFE_INTEGER","DEFAULTS","m","data","seeds","Object","assign","map","Uint32Array","createData","random","count","item","minCount","Infinity","forEach","hash","cnt","_this","setCount","toJSON"],"mappings":"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"}
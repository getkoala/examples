import { JsBloom, CountMinSketch } from '@koala-live/js-bloom';
export * from '@koala-live/js-bloom';
import dayjs from 'dayjs';
import calendar from 'dayjs/plugin/calendar';
import durationPlugin from 'dayjs/plugin/duration';
import relativeTime from 'dayjs/plugin/relativeTime';
import { flattie } from 'flattie';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _performed(profile, event, times) {
  if (times === void 0) {
    times = 1;
  }

  return _performedAtLeast(profile, times, event);
}

function _performedAnyOf(profile) {
  for (var _len = arguments.length, events = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    events[_key - 1] = arguments[_key];
  }

  return events.some(function (event) {
    return _performed(profile, event);
  });
}

function _performedAtLeast(profile, times, event) {
  return profile.counts.count(("events." + event).toLowerCase()) >= times;
}
var Events = /*#__PURE__*/function () {
  function Events(profile) {
    this.profile = void 0;
    this.profile = profile;
  }

  var _proto = Events.prototype;

  _proto.performed = function performed(event, times) {
    if (times === void 0) {
      times = 1;
    }

    return _performed(this.profile, event, times);
  };

  _proto.performedAnyOf = function performedAnyOf() {
    for (var _len2 = arguments.length, events = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      events[_key2] = arguments[_key2];
    }

    return _performedAnyOf.apply(void 0, [this.profile].concat(events));
  };

  _proto.performedAtLeast = function performedAtLeast(times, event) {
    return _performedAtLeast(this.profile, times, event);
  };

  _createClass(Events, [{
    key: "not",
    get: function get() {
      var _this = this;

      return {
        performed: function performed(event, times) {
          if (times === void 0) {
            times = 1;
          }

          return !_this.performed(event, times);
        },
        performedAnyOf: function performedAnyOf() {
          return !_this.performedAnyOf.apply(_this, arguments);
        },
        performedAtLeast: function performedAtLeast(times, event) {
          return !_this.performedAtLeast(times, event);
        }
      };
    }
  }]);

  return Events;
}();

// TODO:
// - add UTM matchers
// - add query params matchers
// - add referrer matchers
// - add traffic source matchers
// - add user agent matchers
// - turn this into a full browser API
function _seen(profile, path, times) {
  if (times === void 0) {
    times = 1;
  }

  return profile.counts.count(("page_views." + path).toLowerCase()) >= times;
}
var _viewed = _seen;

function _viewing(_profile, path) {
  return window.location.pathname.toLowerCase() === path.toLowerCase();
}
var Page = /*#__PURE__*/function () {
  function Page(profile) {
    this.profile = void 0;
    this.profile = profile;
    this.profile = profile;
  }

  var _proto = Page.prototype;

  _proto.seen = function seen(path, times) {
    if (times === void 0) {
      times = 1;
    }

    return _seen(this.profile, path, times);
  };

  _proto.viewed = function viewed(path) {
    return _viewed(this.profile, path);
  };

  _proto.viewing = function viewing(path) {
    return _viewing(this.profile, path);
  };

  _createClass(Page, [{
    key: "not",
    get: function get() {
      var _this = this;

      return {
        seen: function seen(path, times) {
          if (times === void 0) {
            times = 1;
          }

          return !_this.seen(path, times);
        },
        viewed: function viewed(path) {
          return !_this.viewed(path);
        },
        viewing: function viewing(path) {
          return !_this.viewing(path);
        }
      };
    }
  }]);

  return Page;
}();

dayjs.extend(relativeTime);
dayjs.extend(calendar);
dayjs.extend(durationPlugin);

var parseTime = function parseTime(time) {
  if (time === 'yesterday') {
    return dayjs().subtract(1, 'day');
  }

  if (time === 'tomorrow') {
    return dayjs().add(1, 'day');
  }

  if (typeof time === 'string') {
    if (time.endsWith(' ago')) {
      var _time$split = time.split(' '),
          number = _time$split[0],
          unit = _time$split[1];

      return dayjs().subtract(parseInt(number, 10), unit);
    }

    if (time.endsWith(' from now')) {
      var _time$split2 = time.split(' '),
          _number = _time$split2[0],
          _unit = _time$split2[1];

      return dayjs().add(parseInt(_number, 10), _unit);
    }

    return dayjs(time);
  }

  return dayjs(time);
};

function start(profile) {
  var djs = dayjs(profile.sessionStart);
  djs.calendar(null, {
    sameDay: '[Today at] h:mm A',
    nextDay: '[Tomorrow]',
    nextWeek: 'dddd',
    lastDay: '[Yesterday]',
    lastWeek: '[Last] dddd',
    sameElse: 'DD/MM/YYYY' // Everything else ( 7/10/2011 )

  });
  return {
    pretty: djs.format.bind(djs),
    fromNow: djs.fromNow.bind(djs),
    calendar: djs.calendar.bind(djs),
    today: function today() {
      return djs.isSame(dayjs(), 'day');
    },
    isBefore: function isBefore(input) {
      var time = parseTime(input);
      return djs.isBefore(time);
    },
    isAfter: function isAfter(input) {
      var time = parseTime(input);
      return djs.isAfter(time);
    }
  };
}
function duration(profile) {
  var startTime = dayjs(profile.sessionStart);
  var duration = dayjs.duration(dayjs(Date.now()).diff(startTime));
  return {
    pretty: duration.humanize.bind(duration),
    raw: duration,
    seconds: function seconds() {
      return Math.floor(duration.asSeconds());
    },
    minutes: function minutes() {
      return Math.floor(duration.asMinutes());
    },
    hours: function hours() {
      return Math.floor(duration.asHours());
    },
    days: function days() {
      return Math.floor(duration.asDays());
    },
    weeks: function weeks() {
      return Math.floor(duration.asWeeks());
    },
    months: function months() {
      return Math.floor(duration.asMonths());
    }
  };
}
var Session = function Session(profile) {
  this.start = void 0;
  this.duration = void 0;
  this.start = start(profile);
  this.duration = duration(profile);
};

function stringMatcher(traits, key) {
  return {
    is: function is(target) {
      return traits.is(key, target);
    },
    includesItem: function includesItem() {
      for (var _len = arguments.length, targets = new Array(_len), _key = 0; _key < _len; _key++) {
        targets[_key] = arguments[_key];
      }

      return traits.includes(key, targets);
    },
    includesAnyOf: function includesAnyOf() {
      for (var _len2 = arguments.length, targets = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        targets[_key2] = arguments[_key2];
      }

      return traits.includesAnyOf(key, targets);
    }
  };
}

function _has(profile, trait) {
  return !!profile.bloom.test(trait.toLowerCase());
}

function _greaterThan(profile, trait, value) {
  return profile.counts.count(trait.toLowerCase()) > value;
}

function _greaterThanOrEqual(profile, trait, value) {
  return profile.counts.count(trait.toLowerCase()) >= value;
}

function _lessThan(profile, trait, value) {
  return profile.counts.count(trait.toLowerCase()) < value;
}

function _lessThanOrEqual(profile, trait, value) {
  return profile.counts.count(trait.toLowerCase()) <= value;
}

function _is(profile, trait, value) {
  if (value === undefined) {
    return _has(profile, trait);
  }

  if (typeof value === 'object') {
    return _matchesObject(profile, trait, value);
  }

  if (typeof value === 'number') {
    return profile.counts.count(trait.toLowerCase()) === value;
  }

  return profile.bloom.test((trait + ":" + value).toLowerCase());
}

function _matchesObject(profile, trait, value) {
  var flat = flattie(value);
  var allKeys = Object.keys(flat);
  return allKeys.every(function (key) {
    return _is(profile, trait + "." + key, value[key]);
  });
}

function _includes(profile, trait, value) {
  return _is(profile, trait, value) || _is(profile, trait + ".[]", value);
}

function _includesAnyOf(profile, trait, values) {
  return values.some(function (value) {
    return _includes(profile, trait, value);
  });
}

function _includesAllOf(profile, trait, values) {
  return values.every(function (value) {
    return _includes(profile, trait, value);
  });
}
var Traits = /*#__PURE__*/function () {
  function Traits(profile) {
    this.profile = void 0;
    this.profile = profile;
    this.profile = profile;
  }

  var _proto = Traits.prototype;

  _proto.has = function has(trait) {
    return _has(this.profile, trait);
  };

  _proto.greaterThan = function greaterThan(trait, value) {
    return _greaterThan(this.profile, trait, value);
  };

  _proto.greaterThanOrEqual = function greaterThanOrEqual(trait, value) {
    return _greaterThanOrEqual(this.profile, trait, value);
  };

  _proto.lessThan = function lessThan(trait, value) {
    return _lessThan(this.profile, trait, value);
  };

  _proto.lessThanOrEqual = function lessThanOrEqual(trait, value) {
    return _lessThanOrEqual(this.profile, trait, value);
  };

  _proto.is = function is(trait, value) {
    return _is(this.profile, trait, value);
  };

  _proto.matchesObject = function matchesObject(trait, value) {
    return _matchesObject(this.profile, trait, value);
  };

  _proto.includes = function includes(trait, value) {
    return _includes(this.profile, trait, value);
  };

  _proto.includesAnyOf = function includesAnyOf(trait, values) {
    return _includesAnyOf(this.profile, trait, values);
  };

  _proto.includesAllOf = function includesAllOf(trait, values) {
    return _includesAllOf(this.profile, trait, values);
  };

  _createClass(Traits, [{
    key: "not",
    get: function get() {
      var _this = this;

      return {
        has: function has(trait) {
          return !_this.has(trait);
        },
        greaterThan: function greaterThan(trait, value) {
          return !_this.greaterThan(trait, value);
        },
        greaterThanOrEqual: function greaterThanOrEqual(trait, value) {
          return !_this.greaterThanOrEqual(trait, value);
        },
        lessThan: function lessThan(trait, value) {
          return !_this.lessThan(trait, value);
        },
        lessThanOrEqual: function lessThanOrEqual(trait, value) {
          return !_this.lessThanOrEqual(trait, value);
        },
        is: function is(trait, value) {
          return !_this.is(trait, value);
        },
        matchesObject: function matchesObject(trait, value) {
          return !_this.matchesObject(trait, value);
        },
        includes: function includes(trait, value) {
          return !_this.includes(trait, value);
        },
        includesAnyOf: function includesAnyOf(trait, values) {
          return !_this.includesAnyOf(trait, values);
        },
        includesAllOf: function includesAllOf(trait, values) {
          return !_this.includesAllOf(trait, values);
        }
      };
    }
  }]);

  return Traits;
}();

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var runtime_1 = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined$1; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  define(Gp, "constructor", GeneratorFunctionPrototype);
  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined$1) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined$1;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined$1;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  define(Gp, iteratorSymbol, function() {
    return this;
  });

  define(Gp, "toString", function() {
    return "[object Generator]";
  });

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined$1;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined$1, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined$1;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined$1;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined$1;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined$1;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined$1;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   module.exports 
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, in modern engines
  // we can explicitly access globalThis. In older engines we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}
});

function inSegment() {
  for (var _len = arguments.length, predicates = new Array(_len), _key = 0; _key < _len; _key++) {
    predicates[_key] = arguments[_key];
  }

  return predicates.every(Boolean);
}
function when(_x, _x2, _x3) {
  return _when.apply(this, arguments);
}

function _when() {
  _when = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(condition, action, timeout) {
    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", new Promise( /*#__PURE__*/function () {
              var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(resolve, _reject) {
                var check;
                return runtime_1.wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        _context2.next = 2;
                        return condition();

                      case 2:
                        if (!_context2.sent) {
                          _context2.next = 6;
                          break;
                        }

                        action == null ? void 0 : action();
                        resolve();
                        return _context2.abrupt("return");

                      case 6:
                        check = function check() {
                          return setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
                            return runtime_1.wrap(function _callee$(_context) {
                              while (1) {
                                switch (_context.prev = _context.next) {
                                  case 0:
                                    _context.next = 2;
                                    return condition();

                                  case 2:
                                    if (!_context.sent) {
                                      _context.next = 7;
                                      break;
                                    }

                                    action == null ? void 0 : action();
                                    resolve();
                                    _context.next = 8;
                                    break;

                                  case 7:
                                    check();

                                  case 8:
                                  case "end":
                                    return _context.stop();
                                }
                              }
                            }, _callee);
                          })), timeout);
                        };

                        check();

                      case 8:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, _callee2);
              }));

              return function (_x4, _x5) {
                return _ref.apply(this, arguments);
              };
            }()));

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _when.apply(this, arguments);
}

function stringMatcher$1(traits, key) {
  return {
    is: function is(target) {
      return traits.is(key, target);
    },
    includesItem: function includesItem() {
      for (var _len = arguments.length, targets = new Array(_len), _key = 0; _key < _len; _key++) {
        targets[_key] = arguments[_key];
      }

      return traits.includes(key, targets);
    },
    includesAnyOf: function includesAnyOf() {
      for (var _len2 = arguments.length, targets = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        targets[_key2] = arguments[_key2];
      }

      return traits.includesAnyOf(key, targets);
    }
  };
}

function arrayMatcher(traits, key) {
  return {
    includesItem: function includesItem(target) {
      return traits.includes(key, target);
    },
    includesAnyOf: function includesAnyOf() {
      for (var _len3 = arguments.length, targets = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        targets[_key3] = arguments[_key3];
      }

      return traits.includesAnyOf(key, targets);
    },
    includesAllOf: function includesAllOf() {
      for (var _len4 = arguments.length, targets = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        targets[_key4] = arguments[_key4];
      }

      return traits.includesAllOf(key, targets);
    }
  };
}

function numberMatcher(traits, key) {
  return {
    is: function is(target) {
      return traits.is(key, target);
    },
    greaterThan: function greaterThan(target) {
      return traits.greaterThan(key, target);
    },
    greaterThanOrEqual: function greaterThanOrEqual(target) {
      return traits.greaterThanOrEqual(key, target);
    },
    lessThan: function lessThan(target) {
      return traits.lessThan(key, target);
    },
    lessThanOrEqual: function lessThanOrEqual(target) {
      return traits.lessThanOrEqual(key, target);
    }
  };
}

var Company = /*#__PURE__*/function () {
  function Company(profile) {
    this.traits = void 0;
    this.traits = new Traits(profile);
  }

  var _proto = Company.prototype;

  _proto.isB2B = function isB2B() {
    return this.tags.includesItem('B2B');
  };

  _proto.isB2C = function isB2C() {
    return this.tags.includesItem('B2C');
  };

  _proto.isEnterprise = function isEnterprise() {
    return this.tags.includesItem('Enterprise');
  };

  _proto.isEcommerce = function isEcommerce() {
    return this.tags.includesItem('E-commerce');
  };

  _proto.isSaas = function isSaas() {
    return this.tags.includesItem('SAAS');
  };

  _createClass(Company, [{
    key: "name",
    get: function get() {
      return stringMatcher$1(this.traits, 'company.name');
    }
  }, {
    key: "domain",
    get: function get() {
      return stringMatcher$1(this.traits, 'company.domain');
    }
  }, {
    key: "sector",
    get: function get() {
      return stringMatcher$1(this.traits, 'company.category.sector');
    }
  }, {
    key: "type",
    get: function get() {
      return stringMatcher$1(this.traits, 'company.type');
    }
  }, {
    key: "industryGroup",
    get: function get() {
      return stringMatcher$1(this.traits, 'company.category.industryGroup');
    }
  }, {
    key: "industry",
    get: function get() {
      return stringMatcher$1(this.traits, 'company.category.industry');
    }
  }, {
    key: "subIndustry",
    get: function get() {
      return stringMatcher$1(this.traits, 'company.category.subIndustry');
    }
  }, {
    key: "foundedYear",
    get: function get() {
      return numberMatcher(this.traits, 'company.foundedYear');
    }
  }, {
    key: "timezone",
    get: function get() {
      return stringMatcher$1(this.traits, 'company.timezone');
    }
  }, {
    key: "city",
    get: function get() {
      return stringMatcher$1(this.traits, 'company.geo.city');
    }
  }, {
    key: "state",
    get: function get() {
      return stringMatcher$1(this.traits, 'company.geo.state');
    }
  }, {
    key: "stateCode",
    get: function get() {
      return stringMatcher$1(this.traits, 'company.geo.stateCode');
    }
  }, {
    key: "country",
    get: function get() {
      return stringMatcher$1(this.traits, 'company.geo.country');
    }
  }, {
    key: "countryCode",
    get: function get() {
      return stringMatcher$1(this.traits, 'company.geo.countryCode');
    }
  }, {
    key: "employeeCount",
    get: function get() {
      return numberMatcher(this.traits, 'company.metrics.employees');
    }
  }, {
    key: "employeesRange",
    get: function get() {
      return stringMatcher$1(this.traits, 'company.metrics.employeesRange');
    }
  }, {
    key: "marketCap",
    get: function get() {
      return numberMatcher(this.traits, 'company.metrics.marketCap');
    }
  }, {
    key: "amountRaised",
    get: function get() {
      return numberMatcher(this.traits, 'company.metrics.raised');
    }
  }, {
    key: "annualRevenue",
    get: function get() {
      return numberMatcher(this.traits, 'company.metrics.annualRevenue');
    }
  }, {
    key: "estimatedAnnualRevenue",
    get: function get() {
      return stringMatcher$1(this.traits, 'company.metrics.estimatedAnnualRevenue');
    }
  }, {
    key: "tech",
    get: function get() {
      return arrayMatcher(this.traits, 'company.tech');
    }
  }, {
    key: "techCategories",
    get: function get() {
      return arrayMatcher(this.traits, 'company.techCategories');
    }
  }, {
    key: "tags",
    get: function get() {
      return arrayMatcher(this.traits, 'company.tags');
    }
  }]);

  return Company;
}();

var Person = /*#__PURE__*/function () {
  function Person(profile) {
    this.traits = void 0;
    this.traits = new Traits(profile);
  }

  _createClass(Person, [{
    key: "timezone",
    get: function get() {
      return stringMatcher(this.traits, 'person.timezone');
    }
  }, {
    key: "city",
    get: function get() {
      return stringMatcher(this.traits, 'person.geo.city');
    }
  }, {
    key: "state",
    get: function get() {
      return stringMatcher(this.traits, 'person.geo.state');
    }
  }, {
    key: "stateCode",
    get: function get() {
      return stringMatcher(this.traits, 'person.geo.stateCode');
    }
  }, {
    key: "country",
    get: function get() {
      return stringMatcher(this.traits, 'person.geo.country');
    }
  }, {
    key: "countryCode",
    get: function get() {
      return stringMatcher(this.traits, 'person.geo.countryCode');
    }
  }, {
    key: "company",
    get: function get() {
      return stringMatcher(this.traits, 'person.employment.name');
    }
  }, {
    key: "title",
    get: function get() {
      return stringMatcher(this.traits, 'person.employment.title');
    }
  }, {
    key: "role",
    get: function get() {
      return stringMatcher(this.traits, 'person.employment.role');
    }
  }, {
    key: "subRole",
    get: function get() {
      return stringMatcher(this.traits, 'person.employment.subRole');
    }
  }, {
    key: "seniority",
    get: function get() {
      return stringMatcher(this.traits, 'person.employment.seniority');
    }
  }]);

  return Person;
}();

var removeIndexes = function removeIndexes(key) {
  var replaced = key.replace(/\.(\d+)/g, '.[]');
  return replaced;
};

function isEvent(e) {
  if (typeof e !== 'object') {
    return false;
  }

  if (e != null && e.hasOwnProperty('event')) {
    return true;
  }

  return false;
}

function isPageView(e) {
  if (typeof e !== 'object') {
    return false;
  }

  if (e != null && e.hasOwnProperty('page')) {
    if (e.page['path']) {
      return true;
    }
  }

  return false;
}

function increment(profile, key, by) {
  if (by === void 0) {
    by = 1;
  }

  profile.counts.add(key.toLowerCase(), by);
}

function setCount(profile, key, to) {
  profile.counts.setCount(key.toLowerCase(), to);
}

function add(profile, key) {
  profile.bloom.add(key.toLowerCase());
}

function indexPair(profile, key, value) {
  var cleanKey = removeIndexes(key);

  if (typeof value === 'number') {
    // overrides the counts in the Count Min Sketch,
    // as opposed to incrementing the count.
    // This is what allows us to query traits that are numbers
    setCount(profile, cleanKey + ":" + value, value);
    setCount(profile, cleanKey, value);
  } else {
    add(profile, cleanKey + ":" + value);
    add(profile, cleanKey);
  }

  return profile;
}

function index(profile, element) {
  if (Array.isArray(element)) {
    element.forEach(function (e) {
      index(profile, e);
    });
    return;
  }

  if (isEvent(element)) {
    var _element$properties;

    increment(profile, "events." + element.event);
    var props = Object.entries(flattie((_element$properties = element.properties) != null ? _element$properties : {}));
    props.forEach(function (_ref) {
      var key = _ref[0],
          value = _ref[1];
      indexPair(profile, key, value);
    });
    return;
  }

  if (isPageView(element)) {
    increment(profile, "page_views." + element.page.path);
    return;
  }

  if (typeof element === 'object') {
    var flat = Object.entries(flattie(element));
    flat.forEach(function (_ref2) {
      var key = _ref2[0],
          value = _ref2[1];
      indexPair(profile, key, value);
    });
    return;
  }

  return;
}

function _index(profile, indexable) {
  index(profile, indexable);
}

function build(data) {
  var _data$sessionStart;

  var bloom = new JsBloom(data.b);
  var counts = new CountMinSketch(data.c);
  var profile = {
    counts: counts,
    bloom: bloom,
    sessionStart: (_data$sessionStart = data.sessionStart) != null ? _data$sessionStart : new Date()
  };
  return {
    traits: new Traits(profile),
    events: new Events(profile),
    page: new Page(profile),
    session: new Session(profile),
    company: new Company(profile),
    person: new Person(profile),
    inSegment: inSegment,
    when: when,
    raw: profile,
    index: function index(indexable) {
      return _index(profile, indexable);
    }
  };
}

export { build };
//# sourceMappingURL=edge-api-client.esm.js.map

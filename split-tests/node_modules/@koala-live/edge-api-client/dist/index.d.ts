export declare type JSONObject = {
    [key: string]: any;
};
export declare type JSONArray = Array<JSONObject>;
export declare type JSONValue = string | number | boolean | null | JSONObject | JSONArray;
export interface AnalyticsEvent {
    type: 'track';
    event: string;
    properties?: JSONValue;
    received_at?: Date;
}
export interface PageDefault {
    path: string;
    referrer?: string;
    search?: string;
    title?: string;
    url?: string;
    utm?: Record<string, string>;
}
export interface PageView {
    page: PageDefault;
    visit_start?: Date;
    visit_end?: Date;
}
export interface TrafficSource {
    type: 'utm' | 'referrer';
    value: string;
}
export interface Raw {
    events?: AnalyticsEvent[];
    traits?: Record<string, JSONValue>;
    firmographics?: Record<string, JSONValue>;
    person?: Record<string, JSONValue>;
    pageViews?: PageView[];
    trafficSources?: TrafficSource[];
    sessionStart?: Date;
}
import { CountMinSketchOptions, JsBloomOptions } from '@koala-live/js-bloom';
export * from '@koala-live/js-bloom';
import type { Indexable, Profile } from './indexing';
import { Events } from './events';
import { Page } from './page';
import { Session } from './session';
import { Traits } from './traits';
import { inSegment, when } from './in-segment';
import { Company } from './company';
import { Person } from './person';
export declare type BuildOptions = {
    b?: JsBloomOptions;
    c?: CountMinSketchOptions;
    sessionStart?: Date;
};
interface EdgeAPI {
    traits: Traits;
    events: Events;
    page: Page;
    session: Session;
    company: Company;
    person: Person;
    inSegment: typeof inSegment;
    when: typeof when;
    raw: Profile;
    index: (indexable: Indexable | Indexable[]) => void;
}
export declare function build(data: BuildOptions): EdgeAPI;
